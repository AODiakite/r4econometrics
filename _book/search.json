[{"path":"index.html","id":"bienvenue","chapter":"Bienvenue","heading":"Bienvenue","text":"sample book written Markdown. can use anything Pandoc’s Markdown supports; example, math equation \\(^2 + b^2 = c^2\\).","code":""},{"path":"index.html","id":"remerciements","chapter":"Bienvenue","heading":"Remerciements","text":"bookdown chapter .Rmd file, .Rmd file can contain one (one) chapter. chapter must start first-level heading: # good chapter, can contain one (one) first-level heading.Use second-level higher headings within chapters like: ## short section ### even shorter section.index.Rmd file required, also first book chapter. homepage render book.","code":""},{"path":"intro1.html","id":"intro1","chapter":"1 Introduction","heading":"1 Introduction","text":"R est un langage de programmation créé par les staticiens Ross Ihaka et Robert Gentleman.\nC’est un langage dédié aux statistiques, représentations graphiques, ainsi que tout se qui se rattache au traitement et manipulation de données. C’est aussi un logiciel à accès libre (open-source) disponible sous la licence publique générale GNU (GNU General Public License).Principalement écrit en C et Fortran, R est une implémentation du langage S qui supporte plusieurs paradigmes de programmation tel que : procédural, orienté objet, fonctionnel, réflexif, impératif, tableau.Depuis sa création, le langage fortement évolué grâce à la contribution de sa communauté d’utilisateurs notamment par la publications de packages et de tutoriels. Cette évolution permis d’étendre les fonctionnalités de ce langage à la rédaction d’ouvrage avec bookdown, d’article et de présentations avec R markdown, à la représentation graphique avec ggplot2 etc.\nRien que sur le CRAN (Comprehensive R Archive Network) peut trouver plus de 1800 packages.Dans le chapitre suivant nous allons voir les bases de la programmation avec R en utilisant le logiciel RStudio.","code":""},{"path":"base.html","id":"base","chapter":"2 les bases","heading":"2 les bases","text":"l’instar des autres langages, R besoin d’un environnement de développement intégré (IDE) pour être utilisé. En plus d’une console interactive, l’IDE propose plusieurs fonctionnalités. Nous en verrons quelques-unes plus tard.\nR est intégrée par plusieurs logiciels tels que R lui-même, IntelliJ IDE, Rcode etc. Tout au long de cet ouvrage nous n’utiliserons que RStudio qui est l’un des IDE les plus célèbres de R.","code":""},{"path":"base.html","id":"interface","chapter":"2 les bases","heading":"2.1 Interface","text":"\nL’interface RStudio se présente ainsi par défaut. Nous pouvons voir une console, un environnement de travail, une partie pour les scripts et une autre pour la visualisation des graphiques.La console peut servir à écrire une ligne d’instruction qui sera exécutée en appuyant sur Entrer.La partie dédiée au scripts permet d’écrire un ensemble de lignes de codes qui peuvent être exécutées par ordre voulu par l’utilisateur. En plus des scripts, peut y visualiser nos tableaux de données qui sont décrits dans la section 2.3.5.Les graphes peuvent être visibles dans la partie Plots de notre interface. Cette partie est un panneau contenant les onglets Viewer pour les pages html, Files pour naviguer dans les fichiers, Packages pour gérer les packages installes et Help pour chercher de l’aide.La dernière partie c’est à dire Environment est consacrée à la gestion de l’environnement de travail. Elle permet de voir les variable créé lors de notre session mais aussi d’avoir une idée sur leur structure","code":""},{"path":"base.html","id":"firstcode","chapter":"2 les bases","heading":"2.2 Premiers codes","text":"Et si écrivait notre premier code ?\nDans la section précédente nous avons présenté brièvement l’interface de RStudio, place maintenant à notre première instruction. Commencez par effectuer une petite opération d’addition (2+3) sur votre console puis appuyez sur Entrer.Le résultat obtenu est tout naturellement 5. Vous constatez que [1] précède le résultat de l’opération, en effet l’affichage se fait par défaut sous forme d’une liste2.3.3.\nLa console peut être utilisée comme une calculatrice et supporte toute les opération arithmétique telle que la soustraction(-), l’addition(+), la multiplication(*), la division décimale(/), la division entière(%/%), le modulo1 (%%).\nLe symbole (#) sert à écrire une ligne de commentaire.peut aussi effectuer des assignations sans déclarer les variables au préalable comme l’indique le code suivant.","code":"\n2+3\n#> [1] 5\n1+2 #addition\n\n1-2 #Soustraction\n\n1/2 #Division decimale\n\n1%/%2 #Division entiere\n\n1%%2 #Modulo\nx = 1 #affection de la valeur 1 à x\ny <- 2 #affection de la valeur 2 à y\nx+y #somme de x et y (1+2)\n#> [1] 3"},{"path":"base.html","id":"data-R","chapter":"2 les bases","heading":"2.3 Données sur R","text":"Il existe 6 principaux types simples de données sur R sont : logical, integer, double, complex, character, raw.\nIl arrive qu’une structure de données se compose de types simples données, c’est ce que nous allons étudier dans cette section.","code":""},{"path":"base.html","id":"vecteur","chapter":"2 les bases","heading":"2.3.1 Vecteur","text":"","code":""},{"path":"base.html","id":"définition","chapter":"2 les bases","heading":"Définition","text":"Le vecteur est un objet de base de R qui correspond à une liste d’éléments. Ses propriétés fondamentales sont :Dimension unitaire (les vecteurs sont unidimensionnel)Éléments de même type (Toutes les valeurs contenues dans un vecteur sont de même type)Longueure égale au nombre d’éléments","code":""},{"path":"base.html","id":"création","chapter":"2 les bases","heading":"Création","text":"La fonction la plus classique pour créer un vecteur est c(...). Elle prend comme argument les éléments du vecteur. Dans le code suivant, nous allons créer un vecteur contenant les valeurs de 1 jusqu’à 5 puis nous allons le nommer myvectorMaintenant que nous avons un vecteur, il est naturel de se demander comment accéder aux éléments de ce dernier. Facile ! Il suffit de mettre entre crochet ([]), juste après le nom de votre vecteur, l’indice de l’élément voulu sachant que sur R le comptage commence par 1 au lieu de 0. Par exemple, dans la cellule suivante, le code permet d’afficher le quatrième élément c’est-à-dire celui qui pour indice 4 de myvector.Vous pouvez aussi supprimer un élément d’un vecteur en essayant de l’afficher avec l’opposé de son indice. Supprimons le premier élément de myvector !Il se peut qu’veuille créer une séquence de valeurs avec un pas spécifié. Un exemple concret c’est de vouloir créer un vecteur nommé evenVector contenant tous les nombres pairs compris entre 0 et 100. L’utilisation de la fonction c() rendrait le travail fastidieux. La fonction seq() est plus adaptée à notre situation. Elle prend comme argument fom(le début de la séquence), (la fin de la séquence), (le pas de la séquence), etc. Pour en savoir plus vous pouvez exécuter la commande ?seq().Si le pas de la séquence est de 1, peut utiliser à la place de seq() l’opérateur : de premier terme le début de la séquence et de second terme la fin de la séquence. L’exemple qui suit permet de créer le vecteur myvector contenant tous les entiers de 1 à 5.Il est possible de créer un vecteur d’éléments répétitifs avec la fonction rep(). Supposons que nous voulons créer le vecteur repvector contenant 5 fois de suite tous les entiers de 1 à 10, nous allons donner en premier argument à la fonction rep() l’objet à répéter (1:10) et comme second argument le nombre de répétitions(5).","code":"\nmyvector <- c(1,2,3,4,5) #Création\nmyvector #Affichage\n#> [1] 1 2 3 4 5\nmyvector[4]\n#> [1] 4\nmyvector[-1]\n#> [1] 2 3 4 5\nevenVector <- seq(from = 0, to = 100, by = 2) #Création \nevenVector #Affichage\n#>  [1]   0   2   4   6   8  10  12  14  16  18  20  22  24  26\n#> [15]  28  30  32  34  36  38  40  42  44  46  48  50  52  54\n#> [29]  56  58  60  62  64  66  68  70  72  74  76  78  80  82\n#> [43]  84  86  88  90  92  94  96  98 100\nmyvector <- 1:5\nmyvector\n#> [1] 1 2 3 4 5\nrepvector <- rep(1:10,5)\nrepvector\n#>  [1]  1  2  3  4  5  6  7  8  9 10  1  2  3  4  5  6  7  8\n#> [19]  9 10  1  2  3  4  5  6  7  8  9 10  1  2  3  4  5  6\n#> [37]  7  8  9 10  1  2  3  4  5  6  7  8  9 10"},{"path":"base.html","id":"facteur","chapter":"2 les bases","heading":"2.3.2 Facteur","text":"","code":""},{"path":"base.html","id":"définition-1","chapter":"2 les bases","heading":"Définition","text":"Le facteur (factor) est un vecteur de valeurs d’une variable catégorielle. Très souvevent, les variables qualitatives sont catégorielles c’est le cas du sexe(Homme, Femme), des questions directes(Oui, Non), etc.C’est d’ailleurs la raison de l’existance de cet objet sur R qui est très utiles dans certaines representations graphiques.Le caractère principal de factor est qu’il dispose de niveaux appelés levels. Ces derniers sont uniques et peuvent avoir des valeurs qui ne sont pas contenus par le facteur.","code":""},{"path":"base.html","id":"création-1","chapter":"2 les bases","heading":"Création","text":"Pour créer un facteur, commence par créer un vecteur puis avec la fonction factor() nous pouvons le transformer en objet de type facteur. Par défaut, les niveaux des facteurs sont les modalités prises par le vecteur. Pour modifier les niveaux utilise l’argument levels de la fonction factor() pour spécifier notre vecteur de niveaux.\nse propose de transformer en facteur le vecteur animal de modalités chat, souris, chien en un facteur de niveaux chat, souris, chien et rat.","code":"\nanimal <- c(\"souris\",\"souris\",\"chien\",\"chat\",\"chien\",\"chat\",\"souris\",\"chat\",\"chat\",\"chien\")\nmyfactor <- factor(animal,levels = c('chat','souris','chien','rat'))\nmyfactor\n#>  [1] souris souris chien  chat   chien  chat   souris chat  \n#>  [9] chat   chien \n#> Levels: chat souris chien rat"},{"path":"base.html","id":"list","chapter":"2 les bases","heading":"2.3.3 Liste","text":"","code":""},{"path":"base.html","id":"définition-2","chapter":"2 les bases","heading":"Définition","text":"Une liste est un objet pouvant contenir des éléments de tous types. L’homogénéité du type des éléments n’est pas obligatoire dans une liste c’est à dire qu’elle peut contenir des listes, des vecteurs, des matrices, des fonctions etc. peut nommer les éléments d’une liste lors de sa création en effectuant des affections.","code":""},{"path":"base.html","id":"création-2","chapter":"2 les bases","heading":"Création","text":"La création d’une liste se fait avec la fonction list() qui prend en argument les éléments à concaténer.peut accéder à un élément par son nom en utilisant le symbole $ (malist$nomElement). L’accès à l’élément num de mylist peut se faire de la manière suivante :Un autre moyen d’accéder à un élément d’une liste c’est par son indice mis entre deux crochets ([[index]]) juste après le nom de la liste. peut reprendre l’accès à l’élément num par indexation.peut modifier l’élément num de mylist en lui affectant une nouvelle valeur.L’ajout d’un nouvel élément dans mylist peut aussi se faire facilement. Si se propose d’ajouter un élément nommé logical qui reçoit initialement TRUE peut procéder ainsi :","code":"\nmylist = list(num = c(1,2,3), char = 'character')\nmylist\n#> $num\n#> [1] 1 2 3\n#> \n#> $char\n#> [1] \"character\"\nmylist$num\n#> [1] 1 2 3\nmylist[[1]]\n#> [1] 1 2 3\nmylist$num = 1:10\nmylist$num\n#>  [1]  1  2  3  4  5  6  7  8  9 10\nmylist$logical = TRUE\nmylist\n#> $num\n#>  [1]  1  2  3  4  5  6  7  8  9 10\n#> \n#> $char\n#> [1] \"character\"\n#> \n#> $logical\n#> [1] TRUE"},{"path":"base.html","id":"matrice","chapter":"2 les bases","heading":"2.3.4 Matrice","text":"","code":""},{"path":"base.html","id":"définition-3","chapter":"2 les bases","heading":"Définition","text":"Un matrice est un un tableau dont les colonnes sont des vecteurs de même type et de même taille. Autrement dit, la matrice est un objet de deux dimensions dont tous les éléments sont de type homogène. R ne considère pas un vecteur comme une matrice colonne ou ligne, ce sont deux types de structures différentes.","code":""},{"path":"base.html","id":"création-3","chapter":"2 les bases","heading":"Création","text":"Une matrice colonne se crée avec la fonction cbind() et la matrice ligne par rbind(). Pour créer une matrice de plusieurs colonnes utilise la fonction matrix().\nVous pouvez avoir une documentation complète de ces fonctions en exécutant la commande faisant précéder d’un point d’interrogation le nom de votre fonction ( Exemple : ?cbind()) dans votre console.peut accéder aux éléments de la matrice par leurs indices. Comme le fait en maths, il faut d’abord mettre le numéro de la ligne puis le numéro de la colonne séparée par une virgule.\npeut afficher une ligne (respectivement une colonne )toute entière en spécifiant seulement l’indice de la ligne (respectivement la colonne).","code":"\n#matrice colonne\ncolMatrix <- cbind(1:5)\ncolMatrix\n#>      [,1]\n#> [1,]    1\n#> [2,]    2\n#> [3,]    3\n#> [4,]    4\n#> [5,]    5\n#matrice ligne\nrowMatrix <- rbind(1:5)\nrowMatrix\n#>      [,1] [,2] [,3] [,4] [,5]\n#> [1,]    1    2    3    4    5\n#matrice\nMatrix <- matrix(c(x= (1:5), y = rep(1,5)),nrow = 5)\nMatrix\n#>      [,1] [,2]\n#> [1,]    1    1\n#> [2,]    2    1\n#> [3,]    3    1\n#> [4,]    4    1\n#> [5,]    5    1\n# Accès à l'élément de la ligne 4 et de la colonne 1\nMatrix[4,1]\n#> [1] 4\n# Accès à  la ligne 2 \nMatrix[2,]\n#> [1] 2 1\n# Accès à la colonne 3\nMatrix[,2]\n#> [1] 1 1 1 1 1"},{"path":"base.html","id":"dataframe","chapter":"2 les bases","heading":"2.3.5 Tableau de données ou Data frame","text":"","code":""},{"path":"base.html","id":"définition-4","chapter":"2 les bases","heading":"Définition","text":"Un tableau de données (data frame) est comme la matrice, un objet de deux dimensions sauf qu’il peut contenir des colonnes de types différents. Chaque colonne doit contenir des éléments de même type. La data.frame est un objet très utilisé sur R et ce sera le cas dans les chapitres suivants de ce livre.","code":""},{"path":"base.html","id":"création-4","chapter":"2 les bases","heading":"Création","text":"La fonction data.frame() permet de créer un un tableau de données. Elle prend en argument des vecteurs de même longueur. Il en existe d’autres arguments pour cette fonction, pour en savoir plus vous pouvez exécuter ?data.frame().L’accès à un élément peut se faire de la même manière qu’avec les matrices. Pour accéder à une colonne par son nom utilise le symbole $ comme dans la section liste. Les codes suivants permettent d’accéder à l’élément “B” de tableau de plusieurs façons.","code":"\nx = c(12,67,13)\ny = c('A','B','C')\ntableau = data.frame(x,y)\ntableau\n#>    x y\n#> 1 12 A\n#> 2 67 B\n#> 3 13 C\n#Indexiation\ntableau[2,2]\n#> [1] \"B\"\n#Par le nom de la colonne\ntableau$y[2]\n#> [1] \"B\"\ntableau[['y']][2]\n#> [1] \"B\""},{"path":"base.html","id":"les-boucles-et-conditions","chapter":"2 les bases","heading":"2.4 Les boucles et conditions","text":"","code":""},{"path":"base.html","id":"les-boucles","chapter":"2 les bases","heading":"2.4.1 Les boucles","text":"Les boucles permettent de gérer des instructions répétitives. Sur R il est plus pratique d’utiliser la vectorisation, mais pour débuter, les boucles feront l’affaire.","code":""},{"path":"base.html","id":"for","chapter":"2 les bases","heading":"for","text":"La boucle permet d’itérer sur un vecteur de longueur connu d’avance. La syntaxe est la suivante :Un exemple de création d’un vecteur de 5 éléments contenant les carré des nombre compris entre 1 et 5","code":"\nfor (variable in vector) {\n  statements\n}\n#Initialisation\ncarrevector = 0\n#Boucle\nfor (i in 1:5) {\n  carrevector[i]=i^2\n}\n#affichage\ncarrevector\n#> [1]  1  4  9 16 25"},{"path":"base.html","id":"while","chapter":"2 les bases","heading":"While","text":"Si le nombre d’itérations n’est pas connu d’avance alors que la condition d’arrêt si, il est préférable d’utiliser la boucle . Elle permet de répéter une instruction tant qu’une condition est satisfaite. la syntaxe est la suivante :Avec la boucle peut chercher le premier élément supérieur à 10 dans carrevector. Les deux conditions d’arrêts sont alors : l’élément(x) supérieur à 10 et(&) l’indice(j) supérieur à la longueur du vecteur(5).","code":"\nwhile (condition) {\n  statements\n}\n# Initialisation\nj = 1\n# Boucle\nwhile (carrevector[j]<=10 & j<= 5){\n  j=j+1\n}\nx=carrevector[j]\n# Affichage\nx\n#> [1] 16"},{"path":"base.html","id":"les-conditions","chapter":"2 les bases","heading":"2.4.2 Les conditions","text":"Elles permettent d’exécuter des instructions si une ou des conditions sont satisfaites. la syntaxe la plus simple est :Exemple :","code":"\nif (condition) {\n  #statements\n}else{\n  #statements\n}\nnum = 10\nif (num > 0) {\n  print('Ce nombre est positif')\n}else{\n  print('Ce nombre est negatif')\n}\n#> [1] \"Ce nombre est positif\""},{"path":"base.html","id":"les-fonctions","chapter":"2 les bases","heading":"2.5 Les fonctions","text":"Si dans un projet vous aurez à utiliser plusieurs fois un bloc d’instructions, l’idéal c’est de créer des fonctions. Pour cela, besoin de function() que l’assigne au nom de notre fonction.\nLes fonctions peuvent retourner une valeur ou bien exécuter seulement un ensemble d’instructions.Pour créer la fonction addition qui somme deux éléments x et y procède ainsi :Pour utiliser la fonction il suffit de l’appeler en indiquant les valeurs de ses arguments entre parenthèses.","code":"\nmafonction = name <- function(arguments) {\n  instructions\n  return(valuer)\n}\naddition <- function(x,y){\n  return(x+y)\n}\n#Ou bien\naddition <- function(x,y){\n  x+y\n}\n# somme de 10 et de 4\naddition(10,4)\n#> [1] 14"},{"path":"base.html","id":"liens-utils","chapter":"2 les bases","heading":"Liens utils","text":"Emmanuel Paradis2https://cran.r-project.org/doc/contrib/Paradis-rdebuts_fr.pdf","code":""},{"path":"simple-lm.html","id":"simple-lm","chapter":"3 La régression linéaire simple","heading":"3 La régression linéaire simple","text":"can add parts organize one book chapters together. Parts can inserted top .Rmd file, first-level chapter heading file.Add numbered part: # (PART) Act one {-} (followed # chapter)Add unnumbered part: # (PART\\*) Act one {-} (followed # chapter)Add appendix special kind un-numbered part: # (APPENDIX) stuff {-} (followed # chapter). Chapters appendix prepended letters instead numbers.","code":""},{"path":"multiple-lm.html","id":"multiple-lm","chapter":"4 La régression linéaire multiple","heading":"4 La régression linéaire multiple","text":"","code":""},{"path":"multiple-lm.html","id":"footnotes","chapter":"4 La régression linéaire multiple","heading":"4.1 Footnotes","text":"Footnotes put inside square brackets caret ^[]. Like one.3","code":""},{"path":"multiple-lm.html","id":"citations","chapter":"4 La régression linéaire multiple","heading":"4.2 Citations","text":"Reference items bibliography file(s) using @key.example, using bookdown package4 (check last code chunk index.Rmd see citation key added) sample book, built top R Markdown knitr5 (citation added manually external file book.bib).\nNote .bib files need listed index.Rmd YAML bibliography key.bs4_book theme makes footnotes appear inline click . example book, added csl: chicago-fullnote-bibliography.csl index.Rmd YAML, include .csl file. download new style, recommend: https://www.zotero.org/styles/RStudio Visual Markdown Editor can also make easier insert citations: https://rstudio.github.io/visual-markdown-editing/#/citations","code":""},{"path":"glm.html","id":"glm","chapter":"5 Le modèle linéaire généralisé","heading":"5 Le modèle linéaire généralisé","text":"","code":""},{"path":"glm.html","id":"equations","chapter":"5 Le modèle linéaire généralisé","heading":"5.1 Equations","text":"equation.\\[\\begin{equation} \n  f\\left(k\\right) = \\binom{n}{k} p^k\\left(1-p\\right)^{n-k}\n  \\tag{5.1}\n\\end{equation}\\]may refer using \\@ref(eq:binom), like see Equation (5.1).","code":""},{"path":"glm.html","id":"theorems-and-proofs","chapter":"5 Le modèle linéaire généralisé","heading":"5.2 Theorems and proofs","text":"Labeled theorems can referenced text using \\@ref(thm:tri), example, check smart theorem 5.1.Theorem 5.1  right triangle, \\(c\\) denotes length hypotenuse\n\\(\\) \\(b\\) denote lengths two sides, \n\\[^2 + b^2 = c^2\\]Read https://bookdown.org/yihui/bookdown/markdown-extensions--bookdown.html.","code":""},{"path":"glm.html","id":"callout-blocks","chapter":"5 Le modèle linéaire généralisé","heading":"5.3 Callout blocks","text":"bs4_book theme also includes special callout blocks, like .rmdnote.can use markdown inside block.user define appearance blocks LaTeX output.may also use: .rmdcaution, .rmdimportant, .rmdtip, .rmdwarning block name.R Markdown Cookbook provides help use custom blocks design callouts: https://bookdown.org/yihui/rmarkdown-cookbook/custom-blocks.html","code":"\nhead(beaver1, n = 5)\n#>   day time  temp activ\n#> 1 346  840 36.33     0\n#> 2 346  850 36.34     0\n#> 3 346  900 36.35     0\n#> 4 346  910 36.42     0\n#> 5 346  920 36.55     0"},{"path":"anova1.html","id":"anova1","chapter":"6 Analyse de la variance à un facteur","heading":"6 Analyse de la variance à un facteur","text":"","code":""},{"path":"anova1.html","id":"publishing","chapter":"6 Analyse de la variance à un facteur","heading":"6.1 Publishing","text":"HTML books can published online, see: https://bookdown.org/yihui/bookdown/publishing.html","code":""},{"path":"anova1.html","id":"pages","chapter":"6 Analyse de la variance à un facteur","heading":"6.2 404 pages","text":"default, users directed 404 page try access webpage found. ’d like customize 404 page instead using default, may add either _404.Rmd _404.md file project root use code /Markdown syntax.","code":""},{"path":"anova1.html","id":"metadata-for-sharing","chapter":"6 Analyse de la variance à un facteur","heading":"6.3 Metadata for sharing","text":"Bookdown HTML books provide HTML metadata social sharing platforms like Twitter, Facebook, LinkedIn, using information provide index.Rmd YAML. setup, set url book path cover-image file. book’s title description also used.bs4_book provides enhanced metadata social sharing, chapter shared unique description, auto-generated based content.Specify book’s source repository GitHub repo _output.yml file, allows users view chapter’s source file suggest edit. Read features output format :https://pkgs.rstudio.com/bookdown/reference/bs4_book.htmlOr use:","code":"\n?bookdown::bs4_book"},{"path":"anova2.html","id":"anova2","chapter":"7 Analyse de la variance à deux facteurs","heading":"7 Analyse de la variance à deux facteurs","text":"","code":""},{"path":"ancova.html","id":"ancova","chapter":"8 Analyse de la covariance","heading":"8 Analyse de la covariance","text":"","code":""},{"path":"intro-ts.html","id":"intro-ts","chapter":"9 Introduction","heading":"9 Introduction","text":"","code":""},{"path":"intro-ts.html","id":"définition-5","chapter":"9 Introduction","heading":"9.1 Définition","text":"","code":""},{"path":"intro-ts.html","id":"exemples","chapter":"9 Introduction","heading":"9.2 Exemples","text":"","code":""},{"path":"tendances-et-saisonnalités.html","id":"tendances-et-saisonnalités","chapter":"10 Tendances et saisonnalités","heading":"10 Tendances et saisonnalités","text":"","code":""},{"path":"tendances-et-saisonnalités.html","id":"processus-stationnaire","chapter":"10 Tendances et saisonnalités","heading":"10.1 Processus stationnaire","text":"","code":""},{"path":"tendances-et-saisonnalités.html","id":"estimation-paramétrique-de-la-tendance","chapter":"10 Tendances et saisonnalités","heading":"10.2 Estimation paramétrique de la tendance","text":"","code":""},{"path":"tendances-et-saisonnalités.html","id":"estimation-non-paramétrique","chapter":"10 Tendances et saisonnalités","heading":"10.3 Estimation non paramétrique","text":"","code":""},{"path":"tendances-et-saisonnalités.html","id":"elimination-du-trend-et-de-la-saisonnalité","chapter":"10 Tendances et saisonnalités","heading":"10.4 Elimination du trend et de la saisonnalité","text":"","code":""},{"path":"series-stat.html","id":"series-stat","chapter":"11 Séries stationnaires","heading":"11 Séries stationnaires","text":"","code":""},{"path":"series-stat.html","id":"processus-linéaires-et-processus-linéaires-généraux","chapter":"11 Séries stationnaires","heading":"11.1 Processus linéaires et processus linéaires généraux","text":"","code":""},{"path":"series-stat.html","id":"les-processus-armapq","chapter":"11 Séries stationnaires","heading":"11.2 Les processus ARMA(p,q)","text":"","code":""},{"path":"series-stat.html","id":"processusmaq","chapter":"11 Séries stationnaires","heading":"11.2.1 ProcessusMA(q)","text":"","code":""},{"path":"series-stat.html","id":"processus-arp","chapter":"11 Séries stationnaires","heading":"11.2.2 Processus AR(p)","text":"","code":""},{"path":"series-stat.html","id":"autocovariance-des-processus-arma","chapter":"11 Séries stationnaires","heading":"11.3 Autocovariance des processus ARMA","text":"","code":""},{"path":"proc-non-stat.html","id":"proc-non-stat","chapter":"12 Séries non stationnaires","heading":"12 Séries non stationnaires","text":"","code":""},{"path":"proc-non-stat.html","id":"processus-arima","chapter":"12 Séries non stationnaires","heading":"12.1 Processus ARIMA","text":"","code":""},{"path":"proc-non-stat.html","id":"processus-sarima","chapter":"12 Séries non stationnaires","heading":"12.2 Processus SARIMA","text":"","code":""},{"path":"ARCH-GARCH.html","id":"ARCH-GARCH","chapter":"13 Processus ARCH et GARCH","heading":"13 Processus ARCH et GARCH","text":"","code":""},{"path":"ARCH-GARCH.html","id":"définition-6","chapter":"13 Processus ARCH et GARCH","heading":"13.1 Définition","text":"","code":""},{"path":"ARCH-GARCH.html","id":"modèles-arch","chapter":"13 Processus ARCH et GARCH","heading":"13.2 Modèles ARCH","text":"","code":""},{"path":"ARCH-GARCH.html","id":"modèles-garch","chapter":"13 Processus ARCH et GARCH","heading":"13.3 Modèles GARCH","text":"","code":""},{"path":"ARCH-GARCH.html","id":"modèlesarma-garch","chapter":"13 Processus ARCH et GARCH","heading":"13.4 ModèlesARMA-GARCH","text":"","code":""},{"path":"references.html","id":"references","chapter":"References","heading":"References","text":"","code":""}]
